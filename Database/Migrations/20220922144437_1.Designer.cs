// <auto-generated />
using System;
using Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Database.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20220922144437_1")]
    partial class _1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Database.Attractie", b =>
                {
                    b.Property<int>("AttractieId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AttractieId"), 1L, 1);

                    b.Property<string>("Naam")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ReserveringId")
                        .HasColumnType("int");

                    b.HasKey("AttractieId");

                    b.HasIndex("ReserveringId");

                    b.ToTable("Attracties");
                });

            modelBuilder.Entity("Database.GastInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("GastId")
                        .HasColumnType("int");

                    b.Property<string>("LaatstBezochteUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GastId")
                        .IsUnique();

                    b.ToTable("GastInfos");
                });

            modelBuilder.Entity("Database.Gebruiker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Gebruikers");
                });

            modelBuilder.Entity("Database.Onderhoud", b =>
                {
                    b.Property<int>("OnderhoudId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OnderhoudId"), 1L, 1);

                    b.Property<int>("AttractieId")
                        .HasColumnType("int");

                    b.Property<string>("Probleem")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OnderhoudId");

                    b.HasIndex("AttractieId");

                    b.ToTable("Onderhoud");
                });

            modelBuilder.Entity("Database.Reservering", b =>
                {
                    b.Property<int>("ReserveringId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReserveringId"), 1L, 1);

                    b.Property<int?>("gastId")
                        .HasColumnType("int");

                    b.HasKey("ReserveringId");

                    b.HasIndex("gastId");

                    b.ToTable("Reserveringen");
                });

            modelBuilder.Entity("MedewerkerOnderhoud", b =>
                {
                    b.Property<int>("CoordineertId")
                        .HasColumnType("int");

                    b.Property<int>("OnderhoudId")
                        .HasColumnType("int");

                    b.HasKey("CoordineertId", "OnderhoudId");

                    b.HasIndex("OnderhoudId");

                    b.ToTable("MedewerkerOnderhoud");
                });

            modelBuilder.Entity("Database.Gast", b =>
                {
                    b.HasBaseType("Database.Gebruiker");

                    b.Property<int?>("BegeleiderId")
                        .HasColumnType("int");

                    b.Property<int>("Credits")
                        .HasColumnType("int");

                    b.Property<DateTime>("EersteBezoek")
                        .HasColumnType("datetime2");

                    b.Property<int?>("FavorietAttractieId")
                        .HasColumnType("int");

                    b.Property<DateTime>("GeboorteDatum")
                        .HasColumnType("datetime2");

                    b.HasIndex("BegeleiderId");

                    b.HasIndex("FavorietAttractieId");

                    b.ToTable("Gasten", (string)null);
                });

            modelBuilder.Entity("Database.Medewerker", b =>
                {
                    b.HasBaseType("Database.Gebruiker");

                    b.ToTable("Medewerkers", (string)null);
                });

            modelBuilder.Entity("Database.Attractie", b =>
                {
                    b.HasOne("Database.Reservering", null)
                        .WithMany("Attracties")
                        .HasForeignKey("ReserveringId");
                });

            modelBuilder.Entity("Database.GastInfo", b =>
                {
                    b.HasOne("Database.Gast", "gast")
                        .WithOne("GastInfo")
                        .HasForeignKey("Database.GastInfo", "GastId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Database.Coordinate", "Coordinaat", b1 =>
                        {
                            b1.Property<int>("GastInfoId")
                                .HasColumnType("int");

                            b1.Property<int>("X")
                                .HasColumnType("int");

                            b1.Property<int>("Y")
                                .HasColumnType("int");

                            b1.HasKey("GastInfoId");

                            b1.ToTable("GastInfos");

                            b1.WithOwner()
                                .HasForeignKey("GastInfoId");
                        });

                    b.Navigation("Coordinaat")
                        .IsRequired();

                    b.Navigation("gast");
                });

            modelBuilder.Entity("Database.Onderhoud", b =>
                {
                    b.HasOne("Database.Attractie", "attractie")
                        .WithMany()
                        .HasForeignKey("AttractieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Database.DateTimeBereik", "dateTimeBereik", b1 =>
                        {
                            b1.Property<int>("OnderhoudId")
                                .HasColumnType("int");

                            b1.Property<DateTime>("Begin")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime?>("Eind")
                                .HasColumnType("datetime2");

                            b1.HasKey("OnderhoudId");

                            b1.ToTable("Onderhoud");

                            b1.WithOwner()
                                .HasForeignKey("OnderhoudId");
                        });

                    b.Navigation("attractie");

                    b.Navigation("dateTimeBereik")
                        .IsRequired();
                });

            modelBuilder.Entity("Database.Reservering", b =>
                {
                    b.HasOne("Database.Gast", "gast")
                        .WithMany("Reserveringen")
                        .HasForeignKey("gastId");

                    b.OwnsOne("Database.DateTimeBereik", "dateTimeBereik", b1 =>
                        {
                            b1.Property<int>("ReserveringId")
                                .HasColumnType("int");

                            b1.Property<DateTime>("Begin")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime?>("Eind")
                                .HasColumnType("datetime2");

                            b1.HasKey("ReserveringId");

                            b1.ToTable("Reserveringen");

                            b1.WithOwner()
                                .HasForeignKey("ReserveringId");
                        });

                    b.Navigation("dateTimeBereik")
                        .IsRequired();

                    b.Navigation("gast");
                });

            modelBuilder.Entity("MedewerkerOnderhoud", b =>
                {
                    b.HasOne("Database.Medewerker", null)
                        .WithMany()
                        .HasForeignKey("CoordineertId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Onderhoud", null)
                        .WithMany()
                        .HasForeignKey("OnderhoudId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Database.Gast", b =>
                {
                    b.HasOne("Database.Gast", "Begeleider")
                        .WithMany()
                        .HasForeignKey("BegeleiderId");

                    b.HasOne("Database.Attractie", "Favoriet")
                        .WithMany()
                        .HasForeignKey("FavorietAttractieId");

                    b.HasOne("Database.Gebruiker", null)
                        .WithOne()
                        .HasForeignKey("Database.Gast", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Begeleider");

                    b.Navigation("Favoriet");
                });

            modelBuilder.Entity("Database.Medewerker", b =>
                {
                    b.HasOne("Database.Gebruiker", null)
                        .WithOne()
                        .HasForeignKey("Database.Medewerker", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Database.Reservering", b =>
                {
                    b.Navigation("Attracties");
                });

            modelBuilder.Entity("Database.Gast", b =>
                {
                    b.Navigation("GastInfo");

                    b.Navigation("Reserveringen");
                });
#pragma warning restore 612, 618
        }
    }
}
